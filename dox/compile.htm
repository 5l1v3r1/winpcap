<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<meta name="GENERATOR" content="Microsoft FrontPage 6.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<title></title>
</head>

<body>
<p>This section explains how to compile WinPcap, both the kernel level and
the user-level portion, on the various Win32 platforms. The source code can be
found on the WinPcap website, at <a href="http://winpcap.polito.it/install/">http://winpcap.polito.it/install/</a>.</p>
<h2>Compiling the driver</h2>
<p>Two main NPF sources are available for compilation:&nbsp; Windows NTx and Windows 9x. Note that, since the NPF Driver is platform-dependent, it is
STRONGLY suggested to compile it on the OS where it will be used, in order to
link the correct DDK libraries. For example, if you compile the
driver with the Windows NT 4 DDK, it will not work properly on Windows 2000 and 
vice versa.</p>
<h3>Co<a name="#NT40">mpili</a>ng the driver on Windows NTx</h3>
<p>Software requirements:</p>
<ul>
  <li>Microsoft Driver Developer Kit (DDK) for NT for Windows 2000 or Windows
    XP
  <li>A recent version of the Microsoft Platform Software Development Kit (SDK).
    If you encounter compilation problems, try to download the latest version
    from <a href="http://www.microsoft.com/msdownload/platformsdk/sdkupdate/">http://www.microsoft.com/msdownload/platformsdk/sdkupdate/</a>
  <li>Microsoft Visual C++ 6.0</li>
</ul>
<p>If your system satisfies these requirements, follow these steps:</p>
<ol>
  <li>From the Window NT Start menu, select the folder <em>Programs</em> and
    then <i>Development Kits</i>, then <em>Windows XXX DDK</em>, where XXX is
    the target system<em>.</em> From here select the voice <em>Checked Build
    Environment</em> if you want to build a debug version, or <em>Free Build
    Environment</em> if you want to build a release version.
  <li>A command prompt will be opened. Move to the directory PacketNTx inside the
    WinPcap source folder and type the command<br>
    <br>
    <i>CompileNT4</i>, to build the driver for Windows NT 4<i><br>
    </i>or<i><br>
    Compile2k</i>, to build the driver for Windows NT 5 OSes, (like Windows 2000
    or Windows XP)<i><br>
    </i><br>
    This commands will generate the driver (packet.sys), that will be put in the
    DDK output directory (usually \i386).
  </ol>
<p><b>Warning</b>: sometimes, during the compilation of the driver, a lot of
'last line incomplete' errors are generated. Ignore these errors and let the
compilation process continue, they are due to bugs in some DDK versions.</p>
<h3><a name="#95-98">Compili</a>ng the driver on Windows 9x</h3>
<p>To compile the driver for Windows 9x you will need:</p>
<ul>
  <li><font size="3">Driver Developer Kit (DDK) for Windows 95/98/ME</font>
  <li>A recent version of the Microsoft Platform Software Development Kit (SDK).
    If you encounter compilation problems, try to download the latest version
    from <a href="http://www.microsoft.com/msdownload/platformsdk/sdkupdate/">http://www.microsoft.com/msdownload/platformsdk/sdkupdate/</a>
  <li><font size="3">Visual C++ 6.0</font></li>
</ul>
<p>The steps to follow are:</p>
<ol>
  <li>Open a DOS shell
  <li>Go to the VisualC++ BIN directory (for example C:\DEVSTUDIO\VC\BIN) and
    execute the command<br>
    <br>
    <em>Vcvars32<br>
    </em>
  <li>Go to the SDK directory (for example C:\MSSDK) and execute the command<br>
    <br>
    <em>Setenv sdk_path</em><br>
    <br>
    where <em>sdk_path</em> is the directory of SDK (for example Setenv C:\MSSDK)
  <li>Go to the DDK directory (for example C:\DDK) and execute the command<br>
    <br>
    <em>Ddkenv 32 net<br>
    </em>
  <li>Move to the directory whit the driver's source code and type the command<br>
    <br>
    <em>nmake rtl<br>
    <br>
    </em>to obtain a release version, or<br>
    <br>
    <em>nmake<br>
    <br>
    </em>to obtain a debug version.<br>The release version of <i>packet.vxd</i> will be placed in the 
	<em>retail</em>
    directory, the debug version in the <em>debug</em> directory.</li>
</ol>
<p><strong>Warning</strong>: On some systems the NMAKE utility is not able to
launch ADRC2VXD, this means that the driver binary is generated correctly, but
without the copyright information. We don't know the cause of this problem.</p>
<h2>Compiling packet.dll</h2>
<p>Like for NPF, two sources are available for compilation: the Windows NTx one
and the Windows 9x one. They are located in PacketNTx\dll\ and in Packet9x\dll\.</p>
<p>Software requirements:</p>
<ul>
  <li>A recent version of the Microsoft Platform Software Development Kit (SDK).
    If you encounter compilation problems, try to download the latest version
    from <a href="http://www.microsoft.com/msdownload/platformsdk/sdkupdate/">http://www.microsoft.com/msdownload/platformsdk/sdkupdate/</a></li>
  <li>Microsoft Visual C++ 6.0</li>
</ul>
<p>To compile the PACKET.DLL, load the project contained in the directory PacketNTx\dll\project
(or Packet9x\dll\project) in the Visual C++ IDE. There are four project 
configurations:</p>
<ul>
  <li><i>PacketNT - Win32</i> <i>Release</i>: standard release configuration</li>
  <li><i>PacketNT - Win32 Debug</i>: standard debug configuration</li>
  <li><i>PacketNT - Win32 NT4 Release</i>: release configuration able to run on 
  NT4 does not include Wan and IP helper API support.</li>
  <li><i>PacketNT - Win32 NT4 Debug</i>: debug configuration able to run on NT4 
  does not include Wan and IP helper API support.</li>
  <li><i>WanPacket - Win32 Release</i>: release version of the WanPacket 
  library, used to interface with NetMon API for Wan capture</li>
  <li><i>WanPacket - Win32 Debug</i>: debug version of the WanPacket library, 
  used to interface with NetMon API for Wan capture</li>
</ul>
<p>Choose the desired configuration and build the project to obtain the binary 
files.</p>
<h2>Compiling wpcap.dll</h2>
<p>wpcap.dll can be compiled on any Win32 platform and the generated dll is system independent.</p>
<p>System Requirements:</p>
<ul>
  <li>Microsoft Visual C++ 6.0 compiler</li>
  <li>A recent version of the Microsoft Platform Software Development Kit (SDK).
    If you encounter compilation problems, try to download the latest version
    from <a href="http://www.microsoft.com/msdownload/platformsdk/sdkupdate/">http://www.microsoft.com/msdownload/platformsdk/sdkupdate/</a>.
	<b><br>
	Note</b>: with Microsoft Visual Studio .Net you the platform SDK is <b>not</b> 
	needed to compile WinPcap. </li>
	<li>Project files are in the <i>directory winpcap\wpcap\prj</i> of the WinPcap source 
code distribution. Load wpcap.dsw from the Visual C++ IDE and build the program.<br>There are six build project configurations:<b><br>
	<br>
&nbsp;No support for DAG cards and Remore Capture</b></li>
	<li><i>Wpcap debug</i>: winpcap\wpcap\prj\Debug </li>
	<li><i>Wpcap release</i>: winpcap\wpcap\prj\Release<br>
	<br>
	<b>Support for Remote capture, no support for DAG cards</b></li>
	<li><i>Wpcap debug REMOTE</i>: winpcap\wpcap\prj\Debug_REMOTE</li>
	<li><i>Wpcap release REMOTE</i>: winpcap\wpcap\prj\Release_REMOTE<br>
	<b><br>
	Support for DAG cards and Remote Capture</b></li>
	<li><i>Wpcap debug REMOTE DAG</i>: winpcap\wpcap\prj\Debug_REMOTE_DAG</li>
	<li><i>Wpcap release REMOTE DAG</i>: winpcap\wpcap\prj\Release_REMOTE_DAG</li>
</ul>
<p><i>Note</i>: wpcap.dll contains the source code of libpcap from
<a href="http://www.tcpdump.org">www.tcpdump.org</a>, with some modifications 
for remote capture. You will be able to include and build a different libpcap 
version simply copying it in the directory <i>winpcap\wpcap\prj</i> of the 
WinPcap source code distribution, but you must use the &quot;Debug&quot; or &quot;Release&quot; 
build configurations.<br>
&nbsp;</p>

</body>

</html>
