<body>


/*! \mainpage WinPcap Documentation
\image html winpcap.gif
\htmlonly


<p><b>Author</b>:&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Loris Degioanni (<a href="mailto:degioanni@polito.it">degioanni@polito.it</a>),
NetGroup, Politecnico di Torino<font face="Arial" size="4"><br>
</font><b>Home page</b>:&nbsp; <a href="http://netgroup.polito.it/winpcap"><br>
</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="http://netgroup.polito.it/winpcap">http://netgroup.polito.it/winpcap</a></p>


<hr>


<h2>Modules</h2>
<p>
\endhtmlonly \ref NPF<br>
\ref packetapi<br>
\ref wpcap<br>
\ref compilation</p>

\htmlonly
<hr>

<h2>
Introduction</h2>


<p>This Manual documents the usage and the source code of WinPcap. It
offers a detailed description of the functions and the structures exported by
the WinPcap libraries, along with the possibility to browse the source
code of the packet driver. Various browsable examples and a tutorial are
provided as well.&nbsp;</p>
<p> You can follow the links at the
beginning of this page
or use the tree control at the left to reach the section you are interested in.</p>
<p>This documentation was created using (and abusing of) the free Doxygen documentation system, that can be found at <a href="http://www.doxygen.org/index.html">http://www.doxygen.org</a>.</p>
<h2>What is WinPcap</h2>
<p>Quoted from the home page of winpcap:</p>
<p><i>WinPcap is an architecture for packet capture and network analysis for the
Win32 platforms. <span lang="EN-US">It includes a kernel-level packet filter, a
low-level dynamic link library (packet.dll), and a high-level and
system-independent library (wpcap.dll, based on libpcap version 0.5).</span></i></p>
<p>Why we use the term &quot;architecture&quot; rather than &quot;library&quot;? Because packet capture is a low level mechanism
that requires a strict interaction with the network adapter and with the
operating system, in particular with its networking implementation, so a simple
library is not sufficient.&nbsp;</p>
<p>The following figure shows the various components of WinPcap.</p>
<p>&nbsp;</p>
\endhtmlonly
\image html arch.gif
\htmlonly<p>First, a capture system needs to bypass the protocol stack in order to access
the raw data transiting on the network. This requires a portion
running inside the kernel of OS, interacting directly with the network interface
drivers. This portion is very system dependent, and in
our solution it is realized as a device driver, called Netgroup Packet Filter
(NPF); we provide currently different versions of the driver for Windows 95, Windows 98, Windows ME,
Windows NT 4,
Windows 2000 and Windows XP. These drivers offer both basic features like packet capture
and injection, as well as more advanced ones like a programmable filtering system and a
monitoring engine. The first one can be used to restrict a capture session to a
subset of the network traffic (e.g. it is possible to capture only the ftp
traffic generated by a particular host), the second one provides a powerful but
simple to use mechanism to obtain statistics on the traffic (e.g. it is possible
to obtain the network load or the amount of data exchanged between two hosts).</p>
<p>Second, the capture system must export an interface that user-level
applications will use to take advantage of the features provided by the kernel
driver. WinPcap provides two different libraries: <i>packet.dll</i> and <i>wpcap.dll</i>.&nbsp;</p>
<p>
The first one offers a low-level API that can be used to directly access the
functions of the driver, with a programming interface independent from the
Microsoft OS.&nbsp;</p>
<p> The second one exports a more powerful set of high level capture
primitives that are compatible with libpcap, the well known Unix capture library.
These functions allow to capture packets in a way independent from the
underlying network hardware and operating system.</p>
<p>Throughout this documentation we will refer to the <b>Packet Driver API </b>or
<b>packet.dll</b> as the first set of functions, whereas <b>wpcap</b>, <b>wpcap.dll</b> or <b>libpcap</b>
 will refer to the to the second one.</p>
<h2>Further Documentation</h2>
<p>We suggest to give a look at the page <a href="http://netgroup.polito.it/WinPcap/docs/default.htm">http://netgroup.polito.it/WinPcap/docs/</a>
for further and up to date documentation.</p>
<p>In particular, if you are interested in
the structure and the internals of WinPcap, we suggest the reading of the
following documents:</p>
<ul>
  <li>Fulvio Risso, Loris Degioanni, <a href="http://www.polito.it/~risso/pubs/iscc01-wpcap.pdf">An
    Architecture for High Performance Network Analysis</a>, <i>Proceedings of
    the 6<sup>th</sup> IEEE Symposium on Computers and Communications (ISCC
    2001)</i>, Hammamet, Tunisia, July 2001</li>
  <li><span lang="EN-US" style="mso-fareast-font-family: Times New Roman; mso-ansi-language: EN-US; mso-fareast-language: EN-US; mso-bidi-language: AR-SA">Loris
    Degioanni, <a href="http://netgroup-serv.polito.it/winpcap/docs/th_degio.zip">Development
    of an Architecture for Packet Capture and Network Traffic Analysis</a>,
    Graduation Thesis, Politecnico Di Torino (Turin, Italy, Mar. 2000)</span>
</ul>
<h2>Note</h2>
<p>Our development and documentation efforts focus primarily on the
Windows NT/2000/XP version of WinPcap. This choice is based on the fact that the
majority of the WinPcap users utilize it on NTx systems, but also that the 9x technology
has been abandoned by Microsoft. Moreover, we assume that a person that needs to
use a PC for an advanced task like network analysis installs a more advanced OS on the
machine. For this reason, this documentation will refer to the WinNTx
source code and APIs. Win9x code is very similar in the concept but sometimes
differs in the implementation, moreover the Win9x version of the WinPcap APIs
lack of some sophisticated functionality. This documentation describes the whole
APIs, specifying when a function is present only in Windows NTx.</p>
<p>


*/</p>
</body>


